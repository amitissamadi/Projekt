package BS;


import java.util.Random;

/**
 * Used to represent a ship
 * @author hasa
 */
public class Ship {
    // ship array
    public int[][] ships;
    // the game board
    public Board board;
    // the ship type as horizontal or vertical
    // 0 means a ship as a row e.g.
    // X    X   X 
    // and 1 means ship as a column e.g.
    // X
    // X
    // X
    
   
    /*
        * constructor to initiate a few properties
        */
    public Ship(Board board) {
        // 4 types of ships and each one starts in a point having a X and Y coordinate
        ships = new int[4][2];
        // associate a board and this ship collection
        this.board = board;
    }

    public Board getBoard() {
        return board;
    }

    public void setBoard(Board board) {
        this.board = board;
    }

    public int[][] getShips() {
        return ships;
    }

    public void setShips(int[][] ships) {
        this.ships = ships;
    }

    /**
        * Used to init ships
        * We will randomly create 4 types of ships horizontally or vertically
        * Thats to say as:
        * ***********************************
        * Type one cell ship
        * x
        * ***********************************
        * Type two cells ship
        * as X X
        * or as
        * X
        * X
        * ***********************************
        * Type 3 cells ship 
        * as X  X   X
        * or 
        * X
        * X
        * X
        * ***********************************
        * Type 4 cells 
        * as X  X   X   x
        * or 
        * X
        * X
        * X
        * X
        */
    public void initShips() {
        Random random = new Random();
        for (int ship = 0; ship < 4; ship++) {
            ships[ship][0] = random.nextInt(8);
            ships[ship][1] = random.nextInt(8);
            
            //let's check if that shot was already tried 
            //if it was, just finish the do...while when a new pair was randomly selected
            for (int last = 0; last < ship; last++) {
                if ((ships[ship][0] == ships[last][0]) && (ships[ship][1] == ships[last][1])) {
                    do {
                        ships[ship][0] = random.nextInt(8);
                        ships[ship][1] = random.nextInt(8);
                    } while ((ships[ship][0] == ships[last][0]) && (ships[ship][1] == ships[last][1]));
                }
            }
        }

    }

    /**
        * Used to update the table with the ships we have created/set 
        */
    public void updateTable() {
        Random random = new Random(1);
        int type;
        // one cell ship
        int x = ships[0][0];
        int y = ships[0][1];
        getBoard().getTable()[x][y] = 1;

        x = ships[1][0];
        y = ships[1][1];
        // step back by 1 if a cell number is 9. 9 + 1 = 10 is out of table border 
        // do back 1 step, then possible to back forward 1 step in case the x or t is 9
        if (x == 7) { 
            x = x - 1;
        }
        if (y == 7) {
            y = y - 1;
        }
        getBoard().getTable()[x][y] = 1; // 1 means this is a ship 
        
        // two cells ship
        type = random.nextInt(2); // to randomize as vertical or horizontal ship
        // now randomize to get 1 step down or right to make a ship by 2 cells
        if (type == 0) { // do a ship as row (horizental)
            getBoard().getTable()[x + 1][y] = 1;
        } else { // do a ship as column, 1 step down (vertical)
            getBoard().getTable()[x][y + 1] = 1;
        }

        // three cells ship
        x = ships[2][0];
        y = ships[2][1];
        if (x >= 6) {
            x = x - 2;
        }
        if (y >= 6) {
            y = y - 2;
        }
        getBoard().getTable()[x][y] = 1;
        type = random.nextInt(2);
        if (type == 0) { // do row ship
            getBoard().getTable()[x + 1][y] = 1;
            getBoard().getTable()[x + 2][y] = 1;
        } else {
            getBoard().getTable()[x][y + 1] = 1;
            getBoard().getTable()[x][y + 2] = 1;
        }

        // four cells ship
        x = ships[3][0];
        y = ships[3][1];
        if (x >= 5) {
            x = x - 3;
        }
        if (y >= 5) {
            y = y - 3;
        }
        type = random.nextInt(2);
        getBoard().getTable()[x][y] = 1;
        if (type == 0) { // do row ship
            getBoard().getTable()[x + 1][y] = 1;
            getBoard().getTable()[x + 2][y] = 1;
            getBoard().getTable()[x + 3][y] = 1;
        } else {
            getBoard().getTable()[x][y + 1] = 1;
            getBoard().getTable()[x][y + 2] = 1;
            getBoard().getTable()[x][y + 3] = 1;
        }
    }

    /**
        * Used to display/print out the created ships cell coordinate in the table  
        */
    public void showShips() {
        for (int ship = 0; ship < 4; ship++) {
            System.out.println("Ship [" + ship + "] = [" + ships[ship][0] + "]" 
                    + "[" + ships[ship][1] + "]");
        }
    }

}
